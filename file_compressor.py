# -*- coding: utf-8 -*-
"""File_compressor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xlKHqUN1tY1dKonMICKeDcycI8sojDpt
"""

import heapq

import os

class BinaryTree:
    def __init__(self,value,freq):
        self.value = value
        self.freq = freq
        self.left = None
        self.right = None

class Huffman:
    
    def __init__(self,path):
        self.path = path
        self.__heap = []
        self.__code = {}
        
    def __lt__(self,other):
        return self.freq < other.freq
    
    def __eq__(self,other):
        return self.freq == other.freq
    
    def __frequency_from_text(self,text):
        freq_dict = {}
        for char in text:
            if char not in freq_dict:
                freq_dict[char] = 0
            freq_dict[char] += 1    
        return freq_dict
    
    def __Build_heap(self,frequency_dict):
        for key in frequency_dict:
            frequency = frequency_dict[key]
            binary_tree_node = BinaryTree(key,frequency)
            heapq.heappush(self.__heap,binary_tree_node)
            
    def __Build_Binary_Tree(self):
        while len(self.__heap) > 1:
            binary_tree_node_1 = heapq.heappop(self.__heap)
            binary_tree_node_2 = heapq.heappop(self.__heap)
            sum_of_freq = binary_tree_node_1.freq +  binary_tree_node_2.freq
            newnode = BinaryTree(None,sum_of_freq)
            newnode.left = binary_tree_node_1
            newnode.right =  binary_tree_node_2
            heapq.heappush(self.__heap,newnode)
        return
    
    def __Build_Tree_code_helper(self,root,curr_bits):
        if root is None:
            return
        if root.value is not None:
            self.__code[root.value] = curr_bits
        return
        self.__Build_Tree_code_helper(root.left,curr_bits+'0')
        self.__Build_Tree_code_helper(root.right,curr_bits+'1')
        
    def __Build_Tree_code(self):
        root = heapq.heappop(self.__heap)
        self.__Build_Tree_code_helper(root,'')
        
    def __Build_Encoded_Text(self,text):
        encoded_text = ''
        for char in text:
            encoded_text += self.__code[char]
            
        return encoded_text
    
    
    def __Build_padded_Text(self,encoded_text):
        padding_value = 8 - len(encoded_text)%8
        for i in range(padding_value):
            encoded_text == '0'
            
            
        padded_info = "{0:08b}".format(padding_value)
        padded_text = padded_info + encoded_text
        return padded_text
    
    def Build_Byte_Array(self,padded_text):
        array = []
        for i in range(0,len(padded_text),8):
            byte = padded_text[i:i+8]
            array.append(int(byte,2))
            
        return array    
        
    def compression(self):
        print('Compression for your file starts')
        filename,file_extension = os.path.splitext(self.path)
        output_path = filename + '.bin'
        with open(self.path,'r+') as file, open(output_path,'wb') as ouput:
            text = file.read()
            text = text.rstrip()
        frequency_dict = self.__frequency_from_text(text)
        
        build_heap = self.__Build_heap(frequency_dict)
        
        #constructing binary tree from heap
        
        self.__Build_Binary_Tree()
        
        # constructing code from binary tree and storing it in dictionary
        
        self.__Build_Tree_code()
        
        #encoded text
        encoded_text = self.__Build_Encoded_Text(text)
        
        #padding of encoded text
        
        padded_text = self.__Build_padded_Text(encoded_text)
        
        bytes_array = self.__Build_Byte_Array(padded_text)
        
        final_bytes = bytes(bytes_array)
        output.write(final_bytes)
        print("compressed successfully")
        return output_path



path = input("Enter the path of your file")
h = Huffman(path)
h.compression()